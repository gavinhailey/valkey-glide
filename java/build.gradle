plugins {
    id 'java-library'
    id 'maven-publish'
    id 'jacoco'
}

group = 'io.valkey'
version = '0.1.0-SNAPSHOT'

java {
    sourceCompatibility = JavaVersion.VERSION_11
    targetCompatibility = JavaVersion.VERSION_11
    withJavadocJar()
    withSourcesJar()
}

ext {
    defaultReleaseVersion = "255.255.255"
}

allprojects {
    apply plugin: 'jacoco'
    
    ext {
        defaultReleaseVersion = "255.255.255"
    }
    
    jacoco {
        toolVersion = "0.8.9"
    }

    jacocoTestCoverageVerification {
        violationRules {
            rule {
                element = 'CLASS'
                excludes = [
                    'glide.models.protobuf.*',
                    'glide.connectors.resources.*',
                    'glide.connectors.handlers.*'
                ]
            }
        }
    }
}

repositories {
    mavenCentral()
    mavenLocal() // For access to local valkey-glide build
}

dependencies {
    // POC only needs basic Java functionality - no protobuf

    // Test dependencies
    testImplementation 'org.junit.jupiter:junit-jupiter-api:5.10.0'
    testImplementation 'org.junit.jupiter:junit-jupiter-params:5.10.0'
    testImplementation 'org.mockito:mockito-core:5.4.0'
    testRuntimeOnly 'org.junit.jupiter:junit-jupiter-engine:5.10.0'

    // JMH for benchmarking
    testImplementation 'org.openjdk.jmh:jmh-core:1.37'
    testAnnotationProcessor 'org.openjdk.jmh:jmh-generator-annprocess:1.37'
}

// Create a task for running the Cargo build
task buildNative(type: Exec) {
    workingDir '../rust-jni'
    commandLine 'cargo', 'build', '--release'
}

// Make Java build depend on native build
compileJava.dependsOn buildNative

// Copy native libraries to resources
task copyNativeLibs(type: Copy, dependsOn: buildNative) {
    from '../rust-jni/target/release/'
    into 'src/main/resources/native/'
    include '*.so', '*.dylib', '*.dll'
}

// Make JAR building depend on copying native libs
processResources.dependsOn copyNativeLibs
sourcesJar.dependsOn copyNativeLibs

test {
    useJUnitPlatform()

    systemProperty 'java.library.path', file('../rust-jni/target/release').absolutePath
}

publishing {
    publications {
        maven(MavenPublication) {
            artifactId = 'glide-jni'
            from components.java
        }
    }
}
